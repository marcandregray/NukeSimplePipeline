set cut_paste_input [stack 0]
version 11.3 v6
push $cut_paste_input
Dot {
 name ConDot
 knobChanged "\nfrom __future__ import with_statement\ngroup = nuke.toNode(\".\".join(\['root'] + nuke.thisNode().fullName().split('.')\[:-1]))\n#Some variables\nn = nuke.thisNode()\nMode = n.knob('Mode').value()\nconName = n.knob('AutoConnect').value()\n#get outside node\nwith group:\n    if Mode == ('CameraDot'):\n        n\['tile_color'].setValue(4278190335)\n        n\['UpdateAllCam'].setVisible(True)\n        n\['CamSearchMethod'].setVisible(True)\n        n\['SearchMethod'].setVisible(False)\n        n\['SearchString'].setVisible(False)     \n    else: \n        n\['tile_color'].setValue(3569496319)\n        n\['UpdateAllCam'].setVisible(False)\n        n\['CamSearchMethod'].setVisible(False)\n        n\['SearchMethod'].setVisible(True)\n        n\['SearchString'].setVisible(True)\n    #check lots of things\n    if conName != \"0\":\n        if nuke.toNode(conName) is not None:\n            n.setInput(int(0),nuke.toNode(conName))\n            n\['label'].setValue(conName)\n        else:\n            n.setInput(int(0),None)\n            n\['label'].setValue('Failed connection to ' + conName)\n    else:\n        n.setInput(int(0),None)\n        n\['label'].setValue(Mode)\n"
 tile_color 0xff0000ff
 label CameraDot
 note_font_size 42
 selected true
 xpos -19
 ypos -356
 hide_input true
 addUserKnob {20 User}
 addUserKnob {4 Mode M {CameraDot ConnectDot}}
 addUserKnob {26 ""}
 addUserKnob {4 AutoConnect M {}}
 addUserKnob {22 Refresh -STARTLINE T "#Some variables\nn = nuke.thisNode()\nMode = n.knob('Mode').value()\ncType = n.knob('CamSearchMethod').value()\nsType = n.knob('SearchMethod').value()\nsName = n.knob('SearchString').value()\nfirstName = n.knob('AutoConnect').value()\ndotList = \[]\ncameraList = \[]\ncamDepList = \[]\ncamDotList = \[]\n#get outside node\nif Mode == ('CameraDot'):\n    #get all camera nodes\n    for node in nuke.allNodes():\n        if node.Class() in \['Camera2','Camera']:\n            cameraList.append(node.name())\n    #get dots connected to cameras with right labels\n    if cType == ('dot with label'):\n        for r in nuke.allNodes():\n            if r.Class() == (\"Dot\") and r.knob('label').value() != (\"\") and r.knob('hide_input').value() == (False) and r.inputs() == int(1) and r.input(0).Class() in \['Camera2','Camera']:\n                camDotList.append(r.name())        \n\n        n.knob('AutoConnect').setValues(camDotList)\n        #set to old value if possible\n        try:\n            n.knob('AutoConnect').setValue(firstName)\n        except:\n            pass\n\n        newName = n.knob('AutoConnect').value()\n\n    else: #set camera list\n        n.knob('AutoConnect').setValues(cameraList)\n        #set to old value if possible\n        try:\n            n.knob('AutoConnect').setValue(firstName)\n        except:\n            pass\n            \nelse: \n    #search Nodes\n    for node in nuke.allNodes():\n    \n        if sType == ('dot not in name'):\n            if node.Class() == ('Dot') and \"Dot\" not in node.name():\n                dotList.append(node.name())\n        elif sType == ('dot with label'):\n           if node.Class() == ('Dot') and node.knob('label').value() != (\"\") and node.knob('hide_input').value() == (False):\n               dotList.append(node.name())\n\n        elif sType == ('dot name'):\n            if node.Class() == ('Dot') and sName in node.name() and sName !=\"\":\n                dotList.append(node.name())\n\n        elif sType == ('node name'):\n            if sName in node.name() and sName !=\"\":\n                dotList.append(node.name())\n\n        elif sType == ('knob name'):\n            if sName in node.knobs().keys() and sName !=\"\":\n                dotList.append(node.name())\n    \n    #select previous connect value if possible\n    try:\n        dotList.remove(firstName)\n        dotList.insert(0, firstName)\n    except:\n        pass\n    \n    n.knob('AutoConnect').setValues(dotList)\n    \n    try:\n        n.knob('AutoConnect').setValue(firstName)\n    except:\n        pass  "}
 addUserKnob {26 ""}
 addUserKnob {4 CamSearchMethod l "Cam Method" M {"dot with label" camera "" "" ""}}
 addUserKnob {4 SearchMethod l "Search Method" +HIDDEN M {"dot not in name" "dot with label" "dot name" "node name" "knob name" "" "" "" "" "" "" ""}}
 addUserKnob {1 SearchString l "Search for" +HIDDEN}
 addUserKnob {22 UpdateAllCam l "Update All CameraDot Nodes" T "n = nuke.thisNode()\ncamList = n.knob('AutoConnect').values()\nCamMethod = n.knob('CamSearchMethod').value()\nfirstCam = n.knob('AutoConnect').value()\ncam = n.input(0).name()\n\nif nuke.ask('Are you sure you want to update all camera dots to the camera in this node?'):\n\n    for node in nuke.allNodes():\n        if \"concamDot\" in node.knobs().keys():\n            if node.knob('Mode').value() == (\"CameraDot\"): \n                node\['CamSearchMethod'].setValue(CamMethod)\n\n        else:\n            pass\n\n    for node in nuke.allNodes():\n        if \"concamDot\" in node.knobs().keys():\n            if node.knob('Mode').value() == (\"CameraDot\"): \n                node\['AutoConnect'].setValues(camList)\n                node\['AutoConnect'].setValue(firstCam)              \n                node.setInput(int(0),nuke.toNode(cam))\n                       \n        else:\n            pass" +STARTLINE}
 addUserKnob {22 InputZoom l "Navigate to Input" T "node = nuke.thisNode().input(0)\nnuke.zoom( nuke.zoom(), \[ node.xpos(), node.ypos() ])" +STARTLINE}
 addUserKnob {3 concamDot l INVISIBLE +INVISIBLE}
 addUserKnob {26 ""}
 addUserKnob {26 INFO l "" +STARTLINE T "v2.06 - (c) riley gray 2019"}
 addUserKnob {20 INFO_1 l INFO}
 addUserKnob {26 text l "" +STARTLINE T "-The goal of this node was to make hidden inputs in nuke as easy and fast as possible. \nThis node is simply a dot that has the ability to automatically connect to other dots or\nnodes based on what is being searched for.\n\n-The node has two distinct Modes: CameraDot and ConnectDot. CameraDot will by \ndefault look for dots without the word \"dot\" in there names and are directly connected\nto a camera (you could have your rendercamera at the top of the script with a dot under\nit called \"Render_Cam\" and the CameraDot will automatically find it everytime its created).\nyou can also change the search method to search for cameras directly.\n\n-Similarly, by default the ConnectDot mode will look for dots without the word \"dot\" in there names \n(assuming you renamed the dot). The (ctrl+,) function names the dot outputs this way\nand it is the most streamlined way of using the node.\n\n-Because the autoconnect function is running on a knob changed callback, the dot will auto connect\nwhen duplicated or copied into another script. If the connectdot cant connect to its desired node,\nit will print which node it couldnt connect to for simpler transfering of modules and setups\n\n-The refresh button will refresh the list of searched nodes if parameters have changed or the script\nhas changed \n\n"}
}
